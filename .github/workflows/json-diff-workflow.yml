name: Process File Changes
on:
  workflow_call:
    inputs:
      file_paths:
        required: true
        type: string

jobs:
  process-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      - name: Install jq for JSON Diff
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          echo "jq installed successfully."

      - name: Process Files
        run: |
          echo "Input file paths: ${{ inputs.file_paths }}"
          file_paths=$(echo '${{ inputs.file_paths }}' | jq -r '.[]')
          for file in $file_paths; do
            echo "Processing file: $file"

            # Check if the file is newly added
            is_added=$(git diff-tree --no-commit-id --name-only --diff-filter=A -r HEAD -- "$file" | wc -l)

            if [ "$is_added" -eq 1 ]; then
              echo "File $file is newly added."
              echo "{}" > "${file}_old.json"
              git show HEAD:"$file" > "${file}_new.json"
            else
              # Fetch the last commit hash where the file was changed, excluding the very last commit
              last_commit_hash=$(git log -2 --pretty=format:"%H" -- "$file" | tail -n 1)
              echo "Last commit hash for $file: $last_commit_hash"

              # Handle case where no previous version is found
              if [ -z "$last_commit_hash" ]; then
                echo "File not found in any previous commits, creating empty json."
                echo "{}" > "${file}_old.json"
              else
                git show ${last_commit_hash}:$file > "${file}_old.json"
              fi
              git show HEAD:"$file" > "${file}_new.json"
            fi

            echo "Content of old JSON:"
            cat "${file}_old.json"
            echo "Content of new JSON:"
            cat "${file}_new.json"
          done

      - name: Detect Changes with jq
        run: |
          file_paths=$(echo '${{ inputs.file_paths }}' | jq -r '.[]')
          for file in $file_paths; do
              old_json="${file}_old.json"
              new_json="${file}_new.json"

              echo "Processing file: $file"

              # Ensure the old and new JSON files exist
              if [ -s "${old_json}" ] && [ -s "${new_json}" ]; then
                  # Generate a granular diff, retaining unchanged parts
                  diff_json=$(jq --argfile old "${old_json}" --argfile new "${new_json}" -n '
                    $new as $newObj |
                    $old as $oldObj |
                    reduce keys_unsorted($newObj)[] as $key (
                      {};
                      .[$key] = (
                        if $newObj[$key] == $oldObj[$key] then
                          $oldObj[$key]
                        elif (type == "object" or type == "array") and $oldObj[$key] != null then
                          reduce keys_unsorted($newObj[$key])[] as $subKey (
                            {};
                            .[$subKey] = ($newObj[$key][$subKey] - $oldObj[$key][$subKey])
                          )
                        else
                          $newObj[$key] - $oldObj[$key]
                        end
                      )
                    )
                  ')

                  # Ensure directory exists
                  output_file="newjson_${file}"
                  output_dir=$(dirname "${output_file}")
                  mkdir -p "${output_dir}"

                  # Save the granular changes
                  echo "${diff_json}" > "${output_file}"

                  echo "Differences detected for $file:"
                  cat "${output_file}"
                  echo "output_file=${output_file}" >> $GITHUB_OUTPUT
              else
                  echo "One or both JSON files are empty or missing for ${file}"
              fi
          done


      - name: Upload newjson files
        uses: actions/upload-artifact@v4
        with:
          name: newjson-files
          path: newjson_Deployments/**/*.json
