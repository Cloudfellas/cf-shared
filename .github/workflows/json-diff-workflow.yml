name: Process File Changes
on:
  workflow_call:
    inputs:
      file_paths:
        required: true
        type: string

jobs:
  process-changes:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history

      - name: Process Files
        run: |
          file_paths=$(echo '${{ inputs.file_paths }}' | jq -r '.[]')
          for file in $file_paths; do
            echo "Processing file: $file"
            
            # Fetch the last commit hash where the file was changed, excluding the very last commit
            last_commit_hash=$(git log -2 --pretty=format:"%H" -- "$file" | tail -n 1)
            echo "Last commit hash for $file: $last_commit_hash"
            
            # Handle case where no previous version is found
            if [ -z "$last_commit_hash" ]; then
              echo "File not found in any previous commits, creating empty json."
              echo "{}" > "${file}_old.json"
            else
              git show ${last_commit_hash}:$file > "${file}_old.json"
            fi
            echo "Content of old JSON:"
            cat "${file}_old.json"
            
            # Fetch the current version of the file
            git show HEAD:$file > "${file}_new.json"
            echo "Content of new JSON:"
            cat "${file}_new.json"
          done
        

      - name: Install JD for JSON Diff
        run: |
          # Download and install JD
          sudo wget -nv -O /usr/local/bin/jd https://github.com/josephburnett/jd/releases/download/v1.6.0/jd-amd64-linux
          sudo chmod +x /usr/local/bin/jd
      
          # Verify JD installation
          if jd --version; then
            echo "JD installed successfully."
          else
            echo "JD installation failed."
            exit 1
          fi

      - name: Use JD to Detect Changes
        run: |
          file_paths=$(echo '${{ inputs.file_paths }}' | jq -r '.[]')
          for file in $file_paths; do
            # Construct filenames for old and new JSON files
            old_json="${file}_old.json"
            new_json="${file}_new.json"
      
            # Display file contents for debugging
            echo "Verifying contents of ${old_json}:"
            cat "${old_json}"
            echo "Verifying contents of ${new_json}:"
            cat "${new_json}"
      
            # Check if both JSON files exist and are not empty
            if [ -s "${old_json}" ] && [ -s "${new_json}" ]; then
                # Compare OLDJSON and NEWJSON using JD
                jd --set "${old_json}" "${new_json}" > "${file}_diff.json"
                echo "Differences Detected in $file:"
                cat "${file}_diff.json"
                
                # Extract only additions (new blocks)
                additions=$(jd --set "${old_json}" "${new_json}" | grep '^+' | sed -e 's/^+ //')
                echo "Additions in $file:"
                echo "$additions"
            else
                echo "One or both JSON files are empty or missing for ${file}"
            fi
          done
         